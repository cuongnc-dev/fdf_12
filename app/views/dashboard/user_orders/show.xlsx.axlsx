require 'axlsx'
xlsx_package = Axlsx::Package.new
wb = xlsx_package.workbook
wb.styles do |style|
  highlight_cell = style.add_style bg_color: "0033CC", b: true,
    alignment: {horizontal: :center, vertical: :center, wrap_text: true}
  highlight_detail = style.add_style bg_color: "00BB00",
    alignment: {horizontal: :center, vertical: :center, wrap_text: true}
  wrap_text = style.add_style alignment: {horizontal: :center, vertical: :center, wrap_text: true}
  total_price_row = style.add_style alignment: {horizontal: :center, vertical: :center, wrap_text: true},
    fg_color: "ef1c0c"

  @order_products.each do |hash_orders|
    wb.add_worksheet(name: hash_orders.first) do |sheet|
      total = 0;
      orders = hash_orders.last
      group_by_user(orders).each_with_index do |order_products, index|
        sheet.add_row []
        total += sum_price order_products.last
        sheet.add_row [
          increase_one(index),
          user_name_for_id(order_products.first),
          nil, nil, nil , nil, nil, nil],
          style: highlight_cell
        sheet.add_row [nil, nil,
          t("dashboard.products.show.stt"),
          t("dashboard.products.show.name"),
          t("dashboard.products.show.quantity"),
          t("dashboard.products.show.notes"),
          t("dashboard.products.show.price"),
          t("dashboard.products.show.total")],
          style: highlight_detail
        row_first = []
        group_by_order(order_products.last).each_with_index do |orders, index|
          orders.last.each_with_index do |order, index|
            sheet.add_row [nil,
              t("order_at") + orders.first.created_at.strftime(Settings.fomat_time) + "\n" + order_paid_status_text(orders.first),
              increase_one(index),order.product_name,
              order.quantity, order.notes, order.product_price,
              format_price(total_price(order.product_price, order.quantity))],
              style: wrap_text
            row_first = sheet.rows.last if index == 0
          end
          row_last = sheet.rows.last
          sheet.merge_cells("#{row_first.cells.second.r}:#{row_last.cells.second.r}")
        end
        total_row = sheet.add_row [nil, nil, nil, nil, nil, nil, t("order_statistics.total_price"), format_price(sum_price(order_products.last)), nil],
          style: total_price_row
      end
      sheet.add_row []
      sheet.add_row []
      total_row = sheet.add_row [nil, nil, nil, nil, nil, nil, t("order_statistics.total_price_date"), format_price(total.to_s), nil],
        style: total_price_row
    end
  end
end
